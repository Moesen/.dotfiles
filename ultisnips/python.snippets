# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
# Snippet
snippet ifname "quick for ifname==main" b
if __name__ == "__main__":
	
endsnippet

# Creates exercise function and test function
snippet defex "Quick for defining exercise and testing exercise"
def test_ex${1:ExerciseName}():
	ex${1:ExerciseName}()

def ex${1:ExerciseName}():
	return 
endsnippet

snippet section "Quick title"
#====================${0}====================#
endsnippet

snippet plt.figsize "Quick way to make figsize figure"
fig = plt.figure(figsize=(${1:}, ${2:}))
endsnippet

snippet bp "Insert breakpoint" b
breakpoint()
endsnippet

snippet def "Quick way to define a function" 
def ${1:FunctionName}(${2:Arguments}) -> ${3:ReturnType}:
	raise NotImplementedError
endsnippet

snippet import "Quicker way to import packages" 
import ${1:PackageName}
endsnippet
snippet importas "Quicker way to import packages" 
import ${1:PackageName} as ${2:Shortening}
endsnippet
snippet fromimport "Quicker way to import packages" 
from ${1:PackageName} import ${2:Package}
endsnippet
